secrets:
  ssl_cert:
    file: secrets/server.crt
  ssl_key:
    file: secrets/server.key

services:
  postgres:
    image: postgres:17-alpine
    hostname: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8050:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  backend:
    image: REDACTED:5050/team-43/backend
    build: .
    environment:
      DB_NAME: postgres
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      DB_PORT: 5432
      DB_HOST: postgres
      DEBUG: ${DEBUG}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
    volumes:
      - mediafiles:/app/mediafiles
      - staticfiles:/app/staticfiles
    ports:
      - "9000:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://backend:8080/api/ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  e2etest:
    build:
      dockerfile: e2etest.Dockerfile
    environment:
      BASE_URL: "http://backend:8080/api"
    profiles:
      - test
    depends_on:
      backend:
        condition: service_healthy

  frontend:
    build:
      context: frontend
    profiles:
      - prod

  nginx:
    command: nginx -g "daemon off;"
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    image: nginx:alpine
    restart: on-failure
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - mediafiles:/var/www/mediafiles
      - staticfiles:/var/www/staticfiles
    ports:
      - "80:80"
      - "443:443"
    secrets:
      - ssl_cert
      - ssl_key
    profiles:
      - prod

volumes:
  postgres_data:
  mediafiles:
  staticfiles:
